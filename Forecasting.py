#!/usr/bin/env python
# coding: utf-8

# ### TimeSeries Analysis
# 1. A time series forecasting on Revenue generated by top 3 e-stores. From the Top N analysis, the e-stores identified are 1,31,4,30,17. This analysis can be extended to different geographies and the top 3 e-stores in each country as well. But for the moment, it is restricted to only the top 3. For the revenue calculation, we have removed rows where quantity is negative i.e., >= 0
# 2. An additional forecasting exercise where we forecast the number of invoices. It is helpful in the sense that when there are data quality issues( here quantities being -ve) we can forecast number of invoices which are indirectly orders for each e-store. In this case we will focus on the top 3 e-stores as mentioned above.

# In[196]:


###Importing Libraries required
import pandas as pd
import numpy as np
import datetime as dt
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima_model import ARIMA
import warnings
import datetime
from sklearn.metrics import mean_squared_error
from math import sqrt
from matplotlib import pyplot

# load dataset
def parser(x):
    return dt.strptime('190'+x, '%Y-%m')


# In[2]:


###Path for the url at which the data is saved
csv_url = "https://raw.githubusercontent.com/rohithmadupu/DevoTeam_Assignment/main/ecommerce_data.csv"


# In[22]:


###reading the csv and displaying head
df_ecomm = pd.read_csv(csv_url)
df_ecomm.head()


# In[4]:


###Getting schema of the dataframe imported
df_ecomm.dtypes


# In[23]:


##Converting customer Id and estore ID to string
###for customerid  -> also removing .0 at the end
df_ecomm["CustomerID"] = df_ecomm["CustomerID"].astype("str")
df_ecomm["CustomerID"] = df_ecomm["CustomerID"].str.replace('.0', '')
df_ecomm["Estore_id"] = df_ecomm["Estore_id"].astype("str")


# In[24]:


####Checking if both Invoice Dates match and then removing one
if (df_ecomm['InvoiceDate'].equals(df_ecomm['InvoiceDate.1']) == True):
    df_ecomm = df_ecomm.drop(["InvoiceDate.1"], axis = 1)
    
###creating a datefield
df_ecomm['Date'] = pd.to_datetime(df_ecomm.InvoiceDate,errors='coerce').dt.date

df_ecomm['Year'] = pd.to_datetime(df_ecomm.InvoiceDate,errors='coerce').dt.year


# In[41]:


###Creating a timeseries for revenue 
###removing the instances where quantities are null and zeroes as nulls will be generated
df_ecomm_new = df_ecomm[df_ecomm['Quantity'] >= 0]
df_ecomm_new["Revenue"] = df_ecomm_new.Quantity * df_ecomm_new.UnitPrice


# In[224]:


####Grouping and aggregating revenue by date and e-stores
df_ecomm_series = df_ecomm_new.groupby(["Date","Estore_id"]).agg({'Revenue': 'sum'}).reset_index()

###Forecasting data using last 3 months of data
df_ecomm_series = df_ecomm_series[df_ecomm_series.Date >= dt.date(2011,9,9)]


# In[242]:


####Grouping and aggregating transactions by date and e-stores
df_trans_series = pd.DataFrame(df_ecomm.groupby(["Date","Estore_id"]).size().rename('Transaction_Count').reset_index())

###Forecasting data using last 1 months of data
df_trans_series = df_trans_series[df_trans_series.Date >= dt.date(2011,11,9)]


# In[237]:


##Function for ARIMA forecasting, currently with order 1,1,1 with train,test split at 80:20
def forecast_revenue(df_ecomm_series,estore_id):
    df_estore1 = pd.DataFrame(df_ecomm_series[df_ecomm_series.Estore_id == str(estore_id)][["Date","Revenue"]])
    df_estore1.index = df_estore1.Date
    df_estore1 = df_estore1[["Revenue"]]

    X = df_estore1.values
    # split into train and test sets
    size = int(len(X) * 0.8)
    train, test = X[0:size], X[size:len(X)]
    history = [x for x in train]
    predictions = list()

    # walk-forward validation
    for t in range(len(test)):
        model = ARIMA(history, order=(1,1,1))
        model_fit = model.fit()
        output = model_fit.forecast()
        yhat = output[0]
        predictions.append(yhat)
        obs = test[t]
        history.append(obs)
        print('predicted=%f, expected=%f' % (yhat, obs))
    # evaluate forecasts
    rmse = sqrt(mean_squared_error(test, predictions))
    return(rmse,test,predictions)

##Function for ARIMA forecasting, currently with order 1,1,1 with train,test split at 70:30
def forecast_transactions(df_ecomm_series,estore_id):
    df_estore1 = pd.DataFrame(df_ecomm_series[df_ecomm_series.Estore_id == str(estore_id)][["Date","Transaction_Count"]])
    df_estore1.index = df_estore1.Date
    df_estore1 = df_estore1[["Transaction_Count"]]

    X = df_estore1.values
    # split into train and test sets
    size = int(len(X) * 0.7)
    train, test = X[0:size], X[size:len(X)]
    history = [x for x in train]
    predictions = list()

    # walk-forward validation
    for t in range(len(test)):
        model = ARIMA(history, order=(1,1,1))
        model_fit = model.fit()
        output = model_fit.forecast()
        yhat = output[0]
        predictions.append(yhat)
        obs = test[t]
        history.append(obs)
        print('predicted=%f, expected=%f' % (yhat, obs))
    # evaluate forecasts
    rmse = sqrt(mean_squared_error(test, predictions))
    return(rmse,test,predictions)


# In[217]:


##Top 3 Estores are 1,31,4
###Forecasting Revenue for e-storeid 1
rmse_estore1,test_estore1,predictions_estore1 = forecast_revenue(df_ecomm_series,1)

print(f"Test RMSE: {rmse_estore1}")
# plot forecasts against actual outcomes
pyplot.plot(test_estore1)
pyplot.plot(predictions_estore1, color='red')
pyplot.show()


# In[219]:


##Top 3 Estores are 1,31,4
###Forecasting Revenue for e-storeid 31
rmse_estore1,test_estore1,predictions_estore1 = forecast_revenue(df_ecomm_series,31)

print(f"Test RMSE: {rmse_estore1}")
# plot forecasts against actual outcomes
pyplot.plot(test_estore1)
pyplot.plot(predictions_estore1, color='red')
pyplot.show()


# In[220]:


##Top 3 Estores are 1,31,4
###Forecasting Revenue for e-storeid 4
rmse_estore1,test_estore1,predictions_estore1 = forecast_revenue(df_ecomm_series,4)

print(f"Test RMSE: {rmse_estore1}")
# plot forecasts against actual outcomes
pyplot.plot(test_estore1)
pyplot.plot(predictions_estore1, color='red')
pyplot.show()


# In[238]:


##Top 3 Estores are 1,31,4
###Forecasting transactions for e-storeid 1
rmse_estore1,test_estore1,predictions_estore1 = forecast_transactions(df_trans_series,1)

print(f"Test RMSE: {rmse_estore1}")
# plot forecasts against actual outcomes
pyplot.plot(test_estore1)
pyplot.plot(predictions_estore1, color='red')
pyplot.show()


# In[240]:


##Top 3 Estores are 1,31,4
###Forecasting transactions for e-storeid 31
rmse_estore1,test_estore1,predictions_estore1 = forecast_transactions(df_trans_series,31)

print(f"Test RMSE: {rmse_estore1}")
# plot forecasts against actual outcomes
pyplot.plot(test_estore1)
pyplot.plot(predictions_estore1, color='red')
pyplot.show()


# In[241]:


##Top 3 Estores are 1,31,4
###Forecasting transactions for e-storeid 31
rmse_estore1,test_estore1,predictions_estore1 = forecast_transactions(df_trans_series,4)

print(f"Test RMSE: {rmse_estore1}")
# plot forecasts against actual outcomes
pyplot.plot(test_estore1)
pyplot.plot(predictions_estore1, color='red')
pyplot.show()

